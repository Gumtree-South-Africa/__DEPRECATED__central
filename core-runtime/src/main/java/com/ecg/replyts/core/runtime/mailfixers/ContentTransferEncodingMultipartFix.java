package com.ecg.replyts.core.runtime.mailfixers;

import com.ecg.replyts.core.api.processing.MessageFixer;
import com.google.common.base.Optional;
import org.apache.james.mime4j.dom.Message;
import org.apache.james.mime4j.stream.Field;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

import static com.google.common.base.Optional.fromNullable;

/**
 * <strong>Code to repair utterly broken mails as generated by some webmail clients.</strong><br/> Multipart mails may
 * not specify all content-transfer-encodings in the header (only 7bit, 8bit and binary). Such mails are hard to be
 * parsed by all sorts of clients.
 * <p/>
 * We had the issue that some mail client sent mails with Content-Transfer-Encoding: quoted-printable on multipart
 * mails. Therefore the Mail headers and content boundaries were encoded and caused broken mails on clients.
 * <p/>
 * Therefore, try to detect and "fix" the Content-Transfer-Encoding Header issue.
 * <p/>
 * a Sample of how such a "broken" mail could look like is this:
 * <pre>
 *  Delivered-To: foo@bar.com
 *  Content-Transfer-Encoding: quoted-printable
 *  Content-Type: multipart/alternative; boundary="=foo="
 *
 *  --=3Afoo=3A
 *  Content-Type: text/plain
 *
 *  Hello World
 *  --=3Afoo=3A
 *  Content-Type: text/plain
 *
 *  another attachment
 *  --=3Afoo=3A
 * </pre>
 * as one can see, the multipart boundary had been declared as <code>=foo=</code> but was encoded as
 * <code>=3Afoo=3A</code> in the mail.<br/> Here is how that mail should be looking like:
 * <p/>
 * <pre>
 *  Delivered-To: foo@bar.com
 *
 *  Content-Type: multipart/alternative; boundary="=foo="
 *
 *  --=foo=
 *  Content-Transfer-Encoding: quoted-printable
 *  Content-Type: text/plain
 *
 *  Hello World
 *  --=foo=
 *  Content-Type: text/plain
 *  Content-Transfer-Encoding: quoted-printable
 *
 *  another attachment
 *  --=foo=
 * </pre>
 * <p/>
 * <p/>
 * See: <a href="http://www.ietf.org/rfc/rfc2045.txt">RFC 2045 Chapter 6.4</a>
 */
public class ContentTransferEncodingMultipartFix implements MessageFixer {
    private static final Set<String> ALLOWED_ENCODINGS_FOR_MULTIPART = new HashSet<>(Arrays.asList("binary", "7bit", "8bit"));
    private static final String CONTENT_TRANSFER_ENCODING = "Content-Transfer-Encoding";

    @Override
    public void applyIfNecessary(Message mail) {
        if (!mail.isMultipart()) {
            return;
        }
        Optional<Field> contentTransferEncodingField = fromNullable(mail.getHeader().getField(CONTENT_TRANSFER_ENCODING));
        if (contentTransferEncodingField.isPresent()) {
            String usedEncoding = contentTransferEncodingField.get().getBody();
            if (!ALLOWED_ENCODINGS_FOR_MULTIPART.contains(usedEncoding)) {
                mail.getHeader().removeFields(CONTENT_TRANSFER_ENCODING);
            }
        }
    }
}
