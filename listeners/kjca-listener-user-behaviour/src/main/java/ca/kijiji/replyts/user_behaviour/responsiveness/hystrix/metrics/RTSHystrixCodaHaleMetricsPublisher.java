package ca.kijiji.replyts.user_behaviour.responsiveness.hystrix.metrics;

import com.codahale.metrics.MetricRegistry;
import com.google.common.base.Splitter;
import com.google.common.collect.Lists;
import com.netflix.hystrix.*;
import com.netflix.hystrix.contrib.codahalemetricspublisher.HystrixCodaHaleMetricsPublisher;
import com.netflix.hystrix.strategy.metrics.HystrixMetricsPublisherCommand;
import com.netflix.hystrix.strategy.metrics.HystrixMetricsPublisherThreadPool;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.List;

/**
 * Modifies the hystrix codahale publisher to insert the right prefix and suffix in
 * metric names. Prefix is "hystrix" and suffix is the hostname of the machine running
 * this app.
 */
public class RTSHystrixCodaHaleMetricsPublisher extends HystrixCodaHaleMetricsPublisher {
    private static final Logger LOG = LoggerFactory.getLogger(RTSHystrixCodaHaleMetricsPublisher.class);
    private static String hostname = "localhost";

    // Stolen from TimingReports. Can be removed if it becomes public.
    static {
        try {
            hostname = InetAddress.getLocalHost().getCanonicalHostName().replaceAll("[^a-zA-Z0-9-]", "_");
        } catch (UnknownHostException e) {
            LOG.error("Can't get local host name. Metrics will have 'localhost' instead.", e);
        }
    }

    private final MetricRegistry metricRegistry;

    public RTSHystrixCodaHaleMetricsPublisher(MetricRegistry metricRegistry) {
        super(metricRegistry);
        this.metricRegistry = metricRegistry;
    }

    @Override
    public HystrixMetricsPublisherCommand getMetricsPublisherForCommand(HystrixCommandKey commandKey, HystrixCommandGroupKey commandGroupKey, HystrixCommandMetrics metrics, HystrixCircuitBreaker circuitBreaker, HystrixCommandProperties properties) {
        return new RTSHystrixCodaHaleMetricsPublisherCommand(commandKey, commandGroupKey, metrics, circuitBreaker, properties, metricRegistry);
    }

    @Override
    public HystrixMetricsPublisherThreadPool getMetricsPublisherForThreadPool(HystrixThreadPoolKey threadPoolKey, HystrixThreadPoolMetrics metrics, HystrixThreadPoolProperties properties) {
        return new RTSHystrixCodaHaleMetricsPublisherThreadPool(threadPoolKey, metrics, properties, metricRegistry);
    }

    /**
     * Generate a metric name specifically for Hystrix metrics.
     * <p>
     * Unlike the standard codahale/dropwizard ones they don't get the last segment added on
     * at reporting time (.count, .p99 ,etc.), so the hostname needs to be inserted right
     * before the metric name.
     * </p>
     *
     * @param name Full metric name generated by Hystrix
     * @return Metric with "hystrix" segment prepended, and the hostname affixed before the last
     * segment.
     */
    static String metricName(String name) {
        List<String> strings = Lists.newArrayList(Splitter.on('.').split(name));
        strings.add(strings.size() - 1, hostname); // follow convention from TimingReports in core
        return MetricRegistry.name("hystrix", strings.toArray(new String[]{}));
    }
}
