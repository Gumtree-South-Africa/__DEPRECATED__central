#!/usr/bin/env groovy
static def tenantAliases() {
    [
            'mp'   : 'mp',
            'ebayk': 'ek',
            'it'   : 'it',
            'kjca' : 'ca',
            'mde'  : 'mo',
            'gtuk' : 'uk',
            'gtau' : 'au',
            'ar'   : 'ar',
            'mx'   : 'mx',
            'sg'   : 'sg',
            'za'   : 'za',
    ]
}

def checkInputParameters(providedDc, providedTenant) {
    if (providedDc == "-") {
        error("Please provide a DC")
    }
    if (providedTenant == "-") {
        error("Please provide a tenant")
    }
}

String getActiveDC(String tenantShort, String env) {
    if (env == 'lp') {
        return 'ams1'
    }

    String ip = sh(
            script: "dig +short ${tenantShort}.prod.comaas.cloud",
            returnStdout: true
    ).trim()

    echo "getActiveDC: ip = $ip"

    String dc = "???"
    if (ip.startsWith("10.32.24.")) {
        dc = "ams1"
    }
    if (ip.startsWith("10.32.56.")) {
        dc = "dus1"
    }

    echo "getActiveDC: dc = $dc"

    return dc
}

String getOriginalVersion(final String tenantShort, final String env, final String dc) {
    return sh(
            script: "curl -s ${dc}.${tenantShort}.${env}.comaas.cloud/health | jq -r .version",
            returnStdout: true
    ).trim()
}

Integer getMaxParallel(final String tenantShort, final String taskGroup) {
    final Integer count = sh(
            script: "curl -s nomad001:4646/v1/job/comaas-${tenantShort} | jq -r '.TaskGroups[] | select(.Name == \"${taskGroup}\") | .Count'",
            returnStdout: true
    ).trim()
    return count.intdiv(4) <= 1 ? 1 : count.intdiv(4)
}

node("master") {
    checkInputParameters(PROVIDED_DC, PROVIDED_TENANT)

    final String environment = PROVIDED_ENV
    String dc = PROVIDED_DC
    final String tenantLong = PROVIDED_TENANT
    final String tenantShort = tenantAliases().get(tenantLong)
    final String activeDC = getActiveDC(tenantShort, environment)
    boolean isActiveDC = activeDC == dc

    String description = "$tenantLong/$dc/$environment/"

    if (environment == "prod") {
        switch (dc) {
            case "active":
                dc = activeDC
                description += "active"
                break
            case "passive":
                dc = (activeDC == "ams1" ? "dus1" : "ams1")
                description += "passive"
                break
            default:
                description += (dc == activeDC ? "active" : "passive")
                break
        }
    } else {
        // Must be LP environment
        description += "-"
        dc = "ams1"
    }

    currentBuild.description = description

    echo "Restarting Comaas for tenant: ${tenantLong} in " + (isActiveDC ? "ACTIVE" : "") + " dc: ${dc} on env: ${environment}."

    stage("Restarting Comaas") {
        node("$environment && $dc") {
            final String version = getOriginalVersion(tenantShort, environment, dc)
            final String restartJenkinsJob = env.BUILD_NUMBER

            final Integer maxParallelNewMsg = getMaxParallel(tenantShort, "newmsg")
            final Integer maxParallelHttp = getMaxParallel(tenantShort, "http")

            // Is this really necessary? Can we pass the files to the builder instead?
            checkout scm

            def secrets = [
                    [
                            $class: 'VaultSecret',
                            path: 'secret/nomad/dock.es.ecg.tools/comaas+robot_upload',
                            secretValues: [
                                    [$class: 'VaultSecretValue', envVar: 'DOCKER_USERNAME', vaultKey: 'username'],
                                    [$class: 'VaultSecretValue', envVar: 'DOCKER_PASSWORD', vaultKey: 'password']
                            ],
                    ],
            ]
            wrap([$class: 'VaultBuildWrapper', vaultSecrets: secrets]) {
                // Remove after https://jira.corp.ebay.com/browse/COMAAS-950 is fixed
                urlprefixes = ""
                if (tenantShort == 'au') {
                    if (environment == 'lp') {
                        urlprefixes += ",\"urlprefix-au-comaas.dro.ops.qa.au.ecg.so:8006/\""
                    }
                    if (environment == 'prod') {
                        urlprefixes += ",\"urlprefix-au-rts2-api:8080/\",\"urlprefix-au-rts2-api.intern.gumtree.com.au:8080/\""
                    }
                }

                final String hazelcastGroupName = UUID.randomUUID().toString()

                final String vars = "-var-file=/deployment/environments/${environment}.tf " +
                        "-var='version=${version}' " +
                        "-var='urlprefixes=${urlprefixes}' " +
                        "-var='docker_username=${DOCKER_USERNAME}' " +
                        "-var='docker_password=${DOCKER_PASSWORD}' " +
                        "-var='tenant=${tenantLong}' " +
                        "-var='tenant_short=${tenantShort}' " +
                        "-var='environment=${environment}' " +
                        "-var='region=${dc}' " +
                        "-var='api_max_parallel=${maxParallelHttp}' " +
                        "-var='newmsg_max_parallel=${maxParallelNewMsg}' " +
                        "-var='restart_jenkins_job_nr=${restartJenkinsJob}' " +
                        "-var='hazelcast_group_name=${hazelcastGroupName}'"
                final String levantCmd = "docker run --network host --rm -v \$(pwd)/distribution/jenkins/deployment/:/deployment:ro jrasell/levant:0.0.4 levant"

                sh "$levantCmd render ${vars} /deployment/comaas.nomad"
                sh "$levantCmd deploy ${vars} -log-level=debug -address='http://http.nomad.service.consul:4646' /deployment/comaas.nomad"
            }
        }
    }
}
