#!/usr/bin/env groovy
static def tenantAliases() {
    [
            'mp'   : 'mp',
            'ebayk': 'ek',
            'it'   : 'it',
            'kjca' : 'ca',
            'mde'  : 'mo',
            'gtuk' : 'uk',
            'gtau' : 'au',
            'ar'   : 'ar',
            'mx'   : 'mx',
            'sg'   : 'sg',
            'za'   : 'za',
    ]
}

def checkInputParameters(providedDc, providedTenant) {
    if (providedDc == "-") {
        error("Please provide a DC")
    }
    if (providedTenant == "-") {
        error("Please provide a tenant")
    }
}

String getActiveDC(String tenantLongName, String env) {
    if (env == 'lp') {
        return 'ams1'
    }

    final String tenant = tenantAliases().get(tenantLongName)
    String ip = sh(
            script: "dig +short ${tenant}.prod.comaas.cloud",
            returnStdout: true
    ).trim()

    echo "getActiveDC: ip = $ip"

    String dc = "???"
    if (ip.startsWith("10.32.24.")) {
        dc = "ams1"
    }
    if (ip.startsWith("10.32.56.")) {
        dc = "dus1"
    }

    echo "getActiveDC: dc = $dc"

    return dc
}

String getMetaInformation(final String what, final String tenantLongName) {
    return sh(
            script: "curl -sL http://http.nomad.service.consul:4646/v1/job/core-api-${tenantLongName} | jq -r .Meta.${what}",
            returnStdout: true
    ).trim()
}

String getOriginalDeployNr(final String tenantLongName) {
    return getMetaInformation("deploy_jenkins_job_nr", tenantLongName)
}

String getOriginalVersion(final String tenantLongName) {
    return getMetaInformation("version", tenantLongName)
}

String getOriginalWantedInstancesHttp(final String tenantLongName) {
    return getMetaInformation("wanted_instances_api", tenantLongName)
}

String getOriginalWantedInstancesNewMsg(final String tenantLongName) {
    return getMetaInformation("wanted_instances_newmsg", tenantLongName)
}

String getOriginalRestartJenkinsJobNr(final String tenantLongName) {
    return getMetaInformation("restart_jenkins_job_nr", tenantLongName)
}

node("master") {
    checkInputParameters(PROVIDED_DC, PROVIDED_TENANT)

    final String environment = PROVIDED_ENV
    String dc = PROVIDED_DC
    final String tenant = PROVIDED_TENANT
    final String activeDC = getActiveDC(tenant, environment)
    boolean isActiveDC = activeDC == dc

    String description = "$tenant/$dc/$environment/"

    if (environment == "prod") {
        switch (dc) {
            case "active":
                dc = activeDC
                description += "active"
                break
            case "passive":
                dc = (activeDC == "ams1" ? "dus1" : "ams1")
                description += "passive"
                break
            default:
                description += (dc == activeDC ? "active" : "passive")
                break
        }
    } else {
        // Must be LP environment
        description += "-"
        dc = "ams1"
    }

    currentBuild.description = description

    echo "Restarting Comaas for tenant: ${tenant} in " + (isActiveDC ? "ACTIVE" : "") + " dc: ${dc} on env: ${environment}."

    stage("Restarting Comaas") {
        node("$environment && $dc") {
            final String originalDeployJenkinsJobNr = getOriginalDeployNr(tenant)
            final String version = getOriginalVersion(tenant)
            final String wantedInstancesHttp = getOriginalWantedInstancesHttp(tenant)
            final String wantedInstancesNewMsg = getOriginalWantedInstancesNewMsg(tenant)
            final String originalJenkinsRestartJobNr = getOriginalRestartJenkinsJobNr(tenant)
            final String restartJenkinsJob = originalJenkinsRestartJobNr == "none" ? env.BUILD_NUMBER : originalJenkinsRestartJobNr + "," + env.BUILD_NUMBER

            parallel core: {
                ansiColor('xterm') {
                    sh "PYTHONWARNINGS='ignore' servicecontrol.py --logdir ~ --config /etc/comaas/comaas-${tenant}.yaml --restartservice comaas-${tenant}"
                }
            },
            nomad: {
                final String tenantShort = tenantAliases().get(tenant)

                // Is this really necessary? Can we pass the files to the builder instead?
                checkout scm

                withCredentials([[$class          : 'UsernamePasswordMultiBinding', credentialsId: 'docker-registry',
                                  usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS']]) {

                    // Remove after https://jira.corp.ebay.com/browse/COMAAS-950 is fixed
                    urlprefixes = ""
                    if (tenantShort == 'au') {
                        if (environment == 'lp') {
                            urlprefixes += ",\"urlprefix-au-comaas.dro.ops.qa.au.ecg.so:8006/\""
                        }
                        if (environment == 'prod') {
                            urlprefixes += ",\"urlprefix-au-rts2-api:8080/\",\"urlprefix-au-rts2-api.intern.gumtree.com.au:8080/\""
                        }
                    }

                    final String vars = "-var-file=/deployment/environments/${environment}.tf " +
                            "-var='version=${version}' " +
                            "-var='urlprefixes=${urlprefixes}' " +
                            "-var='docker_password=${DOCKER_PASS}' " +
                            "-var='tenant=${tenant}' " +
                            "-var='tenant_short=${tenantShort}' " +
                            "-var='environment=${environment}' " +
                            "-var='region=${dc}' " +
                            "-var='api_count=${wantedInstancesHttp}' " +
                            "-var='api_count=${wantedInstancesNewMsg}' " +
                            "-var='deploy_jenkins_job_nr=${originalDeployJenkinsJobNr}' " +
                            "-var='restart_jenkins_job_nr=${restartJenkinsJob}' "
                    final String levantCmd = "docker run --network host --rm -v \$(pwd)/distribution/jenkins/deployment/:/deployment:ro jrasell/levant:0.0.4 levant"

                    sh "$levantCmd render ${vars} /deployment/comaas.nomad"
                    sh "$levantCmd deploy ${vars} -log-level=debug -address='http://http.nomad.service.consul:4646' /deployment/comaas.nomad"
                }
            }
        }
    }
}
