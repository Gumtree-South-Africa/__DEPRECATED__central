#!/usr/bin/env groovy

library "commonFunctions@${PROVIDED_PIPELINE_BRANCH}"

def checkInputParameters(providedVersion, providedEnv, providedDc, providedTenant) {
    if (providedDc == "-") {
        error("Please provide a DC")
    }
    if (providedTenant == "-") {
        error("Please provide a tenant")
    }
    if (providedVersion != '' && !(providedVersion =~ /^\d{4}\.\d{2}\..+/)) {
        error("Provided version does not have the form 'YYYY.mm.xxx', or empty. Leave empty to deploy the version on LP.")
    }
    if (providedEnv == 'lp' && providedVersion == '') {
        error("You did not provide a version to deploy to lp. Don't know what to do.")
    }
    if (providedDc != 'ams1' && providedEnv == 'lp') {
        error("The lp environment is only available in the ams1 dc.")
    }
    if (!commonFunctions.allTenants().contains(providedTenant) && providedEnv != 'lp') {
        error("You are trying to deploy to all tenants on production. This is not allowed.")
    }
}

void deploymentFailed(final String tenant, final String version, final String dc,
                      final String environmentShort, final Exception ex) {
    echo "--->>> Exception: $ex"
    exMessage = ex.getMessage()
    String currentVersion = commonFunctions.getCurrentlyDeployedVersion(tenant, dc, environmentShort)

    commonFunctions.sendGrafanaMetric(tenant, dc, environmentShort, "failed", "$currentVersion remains")

    String slackMessage = "Deploying Comaas `$tenant` `$version` to `$environmentShort` failed with `$exMessage`, `$currentVersion` remains"
    sendToSlack('#FF0000', tenant, slackMessage, environmentShort)

    error("Deploying Comaas version $version to $environmentShort failed with $exMessage")
}

void sendToSlack(final String colour, final String channel, final String message, final String environmentShort) {
    String c = environmentShort == 'lp' ? 'jenkins' : channel
    if ( channel == 'mvca' ) {
        c = 'move'
    }
    commonFunctions.sendToSlack(colour, c, message)
    if (environmentShort == 'prod') {
        commonFunctions.sendToSlackProdChannel(colour, message)
    }
}

String activeDcSlackString(final String tenantLong, final String dc, final String environmentShort) {
    if (environmentShort != "prod") {
        return ""
    }
    return commonFunctions.getActiveDC(tenantLong, environmentShort) == dc ? "*active DC*" : "_passive DC_"
}

void notifyAboutPendingUpgrade(final String tenant, final String version, final String dc,
                               final String environmentShort) {
    final String currentVersion = commonFunctions.getCurrentlyDeployedVersion(tenant, dc, environmentShort)
    final String dcState = activeDcSlackString(tenant, dc, environmentShort)

    commonFunctions.sendGrafanaMetric(commonFunctions.getAlias(tenant), dc, environmentShort, "started", "from $currentVersion to $version")

    String slackMessage = "Upgrading Comaas for `$tenant` from version `$currentVersion` to `$version` on `$environmentShort` " +
            "in `$dc` $dcState (<https://github.corp.ebay.com/ecg-comaas/central/compare/$currentVersion...$version|Diff>) (<$BUILD_URL|Build>)"
    sendToSlack('#FFFF00', tenant, slackMessage, environmentShort)
}

void downloadFileFromGithub(final String version, final String tenant, final String environmentShort) {
    final String destination = "props.properties"

    withCredentials([string(credentialsId: 'GITHUBBOT-COMAAS-PAT', variable: 'TOKEN')]) {
        String filePath = "ecg-comaas/central/$version/distribution/conf/$tenant/${environmentShort}.properties"
        String status = sh(
                script: "curl --fail -o $destination -sLH 'Authorization: token $TOKEN' https://raw.github.corp.ebay.com/$filePath",
                returnStatus: true
        )
        if (status != "0") {
            error("Could not download $filePath from Github")
        }
    }
}

void loadPropsIntoConsul(final String tenant, final String version, final String environmentShort) {
    downloadFileFromGithub(version, tenant, environmentShort)

    commonFunctions.loginToDocker()

    final String status = sh(
            script: "docker run --network host --rm --volume \$(pwd)/props.properties:/props.properties " +
                    "dock.es.ecg.tools/comaas/properties-to-consul:0.0.7 -tenant ${tenant}",
            returnStatus: true
    )
    if (status != "0") {
        error("Could not load properties into Consul, tenant $tenant, version $version, environment $environmentShort")
    }
}

void deployNomad(final String tenant, final String environment, final String version, final String dc, final String providedPipelineBranch) {
    final String tenantShort = commonFunctions.getAlias(tenant)

    checkout scm: [$class: 'GitSCM', userRemoteConfigs: [[credentialsId: 'GITHUB', url: 'git@github.corp.ebay.com:ecg-comaas/central.git']], branches: [[name: providedPipelineBranch]]], poll: false

    def secrets = [
            [
                    $class      : 'VaultSecret',
                    path        : 'secret/nomad/dock.es.ecg.tools/comaas+robot_upload',
                    secretValues: [
                            [$class: 'VaultSecretValue', envVar: 'DOCKER_USERNAME', vaultKey: 'username'],
                            [$class: 'VaultSecretValue', envVar: 'DOCKER_PASSWORD', vaultKey: 'password']
                    ],
            ],
            [
                    $class      : 'VaultSecret',
                    path        : "secret/nomad/${environment}/swift",
                    secretValues: [
                            [$class: 'VaultSecretValue', envVar: 'SWIFT_USERNAME', vaultKey: 'username'],
                            [$class: 'VaultSecretValue', envVar: 'SWIFT_PASSWORD', vaultKey: 'password']
                    ],
            ],
            [
                    $class      : 'VaultSecret',
                    path        : "secret/nomad/${environment}/esaas",
                    secretValues: [
                            [$class: 'VaultSecretValue', envVar: 'ESAAS_USERNAME', vaultKey: 'username'],
                            [$class: 'VaultSecretValue', envVar: 'ESAAS_PASSWORD', vaultKey: 'password']
                    ],
            ]
    ]
    wrap([$class: 'VaultBuildWrapper', vaultSecrets: secrets]) {
        final String hazelcastGroupName = UUID.randomUUID().toString()

        final String vars = "-var-file=/deployment/environments/${environment}/${tenantShort}.yaml " +
                "-var='version=${version}' " +
                "-var='swift_username=${SWIFT_USERNAME}' " +
                "-var='swift_password=${SWIFT_PASSWORD}' " +
                "-var='docker_username=${DOCKER_USERNAME}' " +
                "-var='docker_password=${DOCKER_PASSWORD}' " +
                "-var='esaas_username=${ESAAS_USERNAME}' " +
                "-var='esaas_password=${ESAAS_PASSWORD}' " +
                "-var='tenant=${tenant}' " +
                "-var='tenant_short=${tenantShort}' " +
                "-var='environment=${environment}' " +
                "-var='region=${dc}' " +
                "-var='hazelcast_group_name=${hazelcastGroupName}'"
        final String levantCmd = "docker run --network host --rm -v \$(pwd)/distribution/jenkins/deployment/:/deployment:ro jrasell/levant:0.2.5 levant"

        sh "$levantCmd render ${vars} /deployment/comaas.nomad"
        sh "$levantCmd deploy ${vars} -force-count=true -log-level=debug -address='http://http.nomad.service.consul:4646' /deployment/comaas.nomad"
    }
}

void deployToEnv(final String tenant, final String environment, final String version, final String dc, final String providedPipelineBranch) {
    deployNomad(tenant, environment, version, dc, providedPipelineBranch)
}

static boolean useLpVersionForProd(final String versionToDeploy, final String environmentShort) {
    return versionToDeploy == '' && environmentShort == 'prod'
}

node("master") {
    checkout scm

    checkInputParameters(PROVIDED_VERSION, PROVIDED_ENV, PROVIDED_DC, PROVIDED_TENANT)

    final String tenant = PROVIDED_TENANT
    final String environmentShort = PROVIDED_ENV
    String versionToDeploy = PROVIDED_VERSION.trim()
    String dc = PROVIDED_DC
    final boolean force = PROVIDED_FORCE == 'true'

    if (useLpVersionForProd(versionToDeploy, environmentShort)) {
        // If the version is empty, deploy the version that's live on lp to prod
        versionToDeploy = commonFunctions.getCurrentlyDeployedVersion(tenant, 'ams1', 'lp')
    }

    if (environmentShort == "prod") {
        switch (dc) {
            case "active":
                dc = commonFunctions.getActiveDC(tenant, "prod")
                break
            case "passive":
                dc = commonFunctions.getPassiveDcProd(tenant)
                break
        }
    }

    currentBuild.description = "$PROVIDED_TENANT/$dc/$versionToDeploy"

    stage("Deploying") {
        node("$environmentShort && $dc") {
            boolean skip = false

            if (force) {
                echo "Force deployment, not checking existing version. Note that deploy.py or levant may still not upgrade for same version."
            } else {
                try {
                    String currentlyDeployedVersion = commonFunctions.getCurrentlyDeployedVersion(tenant, dc, environmentShort)
                    echo "currentlyDeployedVersion == newVersion : $currentlyDeployedVersion == $versionToDeploy"
                    if (currentlyDeployedVersion == versionToDeploy) {
                        echo "Current Comaas $tenant version $currentlyDeployedVersion is up to date, nothing to update (desired version: $versionToDeploy)"
                        currentBuild.result = 'SUCCESS'
                        skip = true
                        return
                    }
                } catch (ex) {
                    deploymentFailed(tenant, versionToDeploy, dc, environmentShort, ex)
                } finally {
                    if (skip) {
                        cleanWs notFailBuild: true
                    }
                }
            }

            if (!skip) {
                try {
                    echo "About to deploy Comaas version $versionToDeploy to $environmentShort in $dc for $tenant"
                    notifyAboutPendingUpgrade(tenant, versionToDeploy, dc, environmentShort)

                    loadPropsIntoConsul(tenant, versionToDeploy, environmentShort)

                    deployToEnv(tenant, environmentShort, versionToDeploy, dc, PROVIDED_PIPELINE_BRANCH as String)

                    commonFunctions.sendGrafanaMetric(commonFunctions.getAlias(tenant), dc, environmentShort, "finished", "deployed $versionToDeploy")

                    final String activeDcSlack = activeDcSlackString(tenant, dc, environmentShort)
                    final String slackMessage = "Comaas version `$versionToDeploy` for `$tenant` successfully deployed to " +
                            "`$environmentShort` in `$dc` ${activeDcSlack}"
                    sendToSlack('#00FF00', tenant, slackMessage, environmentShort)
                } catch (ex) {
                    deploymentFailed(tenant, versionToDeploy, dc, environmentShort, ex)
                } finally {
                    cleanWs notFailBuild: true
                }
            }
            if (env."SKIP_$tenant" != 'true') {
                try {
                    echo "Running smoke tests for $PROVIDED_TENANT against $PROVIDED_DC $PROVIDED_ENV"
                    build job: 'smoke-tests', parameters: [
                            string(name: 'PROVIDED_TENANT', value: "$PROVIDED_TENANT"),
                            string(name: 'PROVIDED_ENV', value: "$PROVIDED_ENV"),
                            string(name: 'PROVIDED_DC', value: "$PROVIDED_DC")
                    ], wait: false
                } finally {
                    cleanWs notFailBuild: true
                }
            }
        }
    }

    if (currentBuild.result == 'FAILURE') {
        currentBuild.result = 'UNSTABLE'
    }
}
